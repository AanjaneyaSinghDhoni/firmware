#!/bin/sh

#check system for initial Freifunk configuration

exec >/root/freifunk_setup.log 2>&1
. /sbin/freifunk_shared

echo "(I) Freifunk: start freifunk_setup"

/etc/init.d/telnet disable
/etc/init.d/nodogsplash disable
/etc/init.d/n2n disable
/etc/init.d/tinc disable

#set empty password for root
(echo ""; sleep 1; echo "") | passwd

ap_ssid=`uci get -q freifunk.settings.ap_ssid`
ah_ssid=`uci get -q freifunk.settings.ah_ssid`


wan_interface=`uci -q get network.wan.ifname`
echo "(I) Freifunk: wan interface: '$wan_interface'"

lan_interface=`uci -q get network.lan.ifname`
echo "(I) Freifunk: lan interface: '$lan_interface'"

wifi_device=`uci -q get wireless.@wifi-iface[0].device`
echo "(I) Freifunk: wifi device: '$wifi_device'"

ff_subnet=`uci get -q freifunk.settings.ff_subnet`

# ------------------------------------------- #
# P R E C O N F I G U R I N G   W I R E L E S S #
# ------------------------------------------- # 


#test if we can span both ad-hoc and access point interfaces
if [ -n "$wifi_device" ]; then
    echo "(I) Freifunk: setup /etc/config/wireless"
    uci set wireless.$wifi_device.channel=1

    #wireless is disabled by default
    uci -q delete wireless.@wifi-device[0].disabled

    #remove all wifi interface entries
    clear_wifi_interfaces() {
        while uci -q delete wireless.@wifi-iface[0]; do :; done
    }
    
    #ad-hoc for batman
    add_ah_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=adhoc
        uci set wireless.@wifi-iface[-1].ssid="$ah_ssid"
        uci set wireless.@wifi-iface[-1].bssid="12:CA:FF:EE:BA:BE"
        uci set wireless.@wifi-iface[-1].hidden=1
    }
    
    #access point for clients
    add_ap_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=ap
        uci set wireless.@wifi-iface[-1].network=mesh
        uci set wireless.@wifi-iface[-1].ssid="$ap_ssid"
        uci set wireless.@wifi-iface[-1].encryption="none"
    }

    wifi_restart() {
      echo "(I) Freifunk: wireless down/up"
      wifi down
      wifi up
    }
    
    record_wifi_interfaces() {
      wifi_ap_interface=`query "uci -P /var/state get wireless.@wifi-iface[?].ssid" "$ap_ssid" "ifname"`
      wifi_ah_interface=`query "uci -P /var/state get wireless.@wifi-iface[?].ssid" "$ah_ssid" "ifname"`
    }
    
    clear_wifi_interfaces
    add_ah_interface
    add_ap_interface
    wifi_restart
    record_wifi_interfaces
    
    #if not both interfaces work; try only ad-hoc
    if [ -z "$wifi_ap_interface" -o -z "$wifi_ah_interface" ]; then
      echo "(I) Freifunk: Cannot start ad-hoc and AP mode at the same time - try ad-hoc only now."
      clear_wifi_interfaces
      add_ah_interface
      wifi_restart
      record_wifi_interfaces
    fi
    
    echo "(I) Freifunk: wifi access point interface: '$wifi_ap_interface'"
    echo "(I) Freifunk: wifi ad-hoc interface: '$wifi_ah_interface'"
fi


# ------------------------------------- #
# A S S I G N  I N T E R F A C E S #
# ------------------------------------- # 

if [ -n "$wifi_ah_interface" ]; then
    bat_interfaces="$bat_interfaces $wifi_ah_interface"
fi

if [ -n "$wifi_ap_interface" ]; then
    mesh_interfaces="$mesh_interfaces $wifi_ap_interface"
fi

if [ -n "$lan_interface" ]; then
    lan_interfaces="$lan_interfaces $lan_interface"
fi

#trim variables and remove double spaces
strip() { echo "$@"; }
bat_interfaces=$(strip $bat_interfaces)
mesh_interfaces=$(strip $mesh_interfaces)

echo "(I) Freifunk: bat interfaces: '$bat_interfaces'"
echo "(I) Freifunk: mesh interfaces: '$mesh_interfaces'"
echo "(I) Freifunk: lan interfaces: '$lan_interfaces'"
echo "(I) Freifunk: wan interfaces: '$wan_interface'"

if [ -z "$bat_interfaces" ]; then
    echo "(E) Freifunk: No mesh interfaces found."
    exit 1
fi

#get a unique (but not just random) mac to identify the node
mesh_mac=`uci get -q wireless.radio0.macaddr`
[ -z "$mesh_mac" -o "$mesh_mac" = "00:11:22:33:44:55" ] && {
    local mac_if=${bat_interfaces%% *}
    mesh_mac=$(ifconfig $mac_if | grep HWaddr | awk '{print $5}')
}
#translate to globally administered mac address
a=${mesh_mac%%:*} #cut out first hex
a=$((0x$a | 2)) #set second bit to 1
a=`printf '%02x\n' $a` #convert to hex
mesh_mac="$a:${mesh_mac#*:}" #reassemble mac

echo "(I) Freifunk: mac for mesh: '$mesh_mac'"


# ------------------------------------- #
# L A N  S E T U P #
# ------------------------------------- #

echo "(I) Freifunk: Setup LAN interfaces."

uci -q delete network.lan
uci -q delete dhcp.lan

uci set network.lan="interface"
uci set network.lan.type="bridge"
uci set network.lan.ifname="$lan_interfaces"
uci set network.lan.ipaddr="192.168.1.1"
uci set network.lan.proto=static
uci set network.lan.netmask="255.255.255.0"

#uci add_list dhcp.@dnsmasq[0].interface="br-lan"
uci set dhcp.lan=dhcp
uci set dhcp.lan.interface=lan
uci set dhcp.lan.start=100
uci set dhcp.lan.limit=150
uci set dhcp.lan.leasetime=12h
uci set dhcp.lan.dhcp_option="3" #no gateway yet


# ------------------------------------- #
# M E S H  S E T U P #
# ------------------------------------- # 

echo "(I) Freifunk: Setup MESH interfaces."

uci set network.mesh="interface"
uci set network.mesh.type="bridge"
uci set network.mesh.ifname="$mesh_interfaces"
uci set network.mesh.ipaddr="0.0.0.0"
#uci set network.mesh.macaddr="$mac" #does not work
uci set network.mesh.proto=static
uci set network.mesh.netmask="255.0.0.0"


# set (not so) magic numbers for start ip and address space
# numbers are ip integer representation
start_ip=$((256*256*$ff_subnet+1)) # -> 1900545
end_ip=$((255*255+253)) # -> 65278

#uci add_list dhcp.@dnsmasq[0].interface="br-mesh"
uci set dhcp.mesh=dhcp
uci set dhcp.mesh.interface=mesh
uci set dhcp.mesh.start=$start_ip
uci set dhcp.mesh.limit=$end_ip
uci set dhcp.mesh.leasetime=2h #max time for address conflicts
uci set dhcp.mesh.dhcp_option="3" #no gateway yet

uci add firewall zone
uci set firewall.@zone[-1].name=mesh
uci set firewall.@zone[-1].network=mesh
uci set firewall.@zone[-1].input=ACCEPT
uci set firewall.@zone[-1].output=ACCEPT
uci set firewall.@zone[-1].forward=REJECT

#forward from lan to mesh
uci add firewall forwarding
uci set firewall.@forwarding[-1]="forwarding"
uci set firewall.@forwarding[-1].src="lan"
uci set firewall.@forwarding[-1].dest="mesh"


# ------------------------------------- #
# W A N  S E T U P #
# ------------------------------------- # 

echo "(I) Freifunk: Setup WAN interface."

uci -q delete network.wan
uci -q delete dhcp.wan

uci set network.wan="interface"
uci set network.wan.ifname="$wan_interface"
uci set network.wan.proto="dhcp"

uci set dhcp.wan=dhcp
uci set dhcp.wan.interface=wan
uci set dhcp.wan.ignore=1


# ------------------------------------- #
# S E T U P  T I N C  /  N 2 N #
# ------------------------------------- # 


bat_interfaces="$bat_interfaces tinc_bat n2n_bat"

uci set freifunk.settings.bat_interfaces="$bat_interfaces "
uci set freifunk.settings.mesh_interfaces="$mesh_interfaces "
uci set freifunk.settings.lan_interfaces="$lan_interfaces "
uci set freifunk.settings.wan_interfaces="$wan_interface "
uci set freifunk.settings.mac="$mesh_mac"

uci commit

echo "(I) Freifunk: done freifunk_setup"
