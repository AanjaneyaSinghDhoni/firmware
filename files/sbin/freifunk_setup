#!/bin/sh

#Initialize the Freifunk configuration

exec >/tmp/freifunk_setup.log 2>&1

echo "(I) Freifunk: start"

#disable telnet
/etc/init.d/telnet disable
/etc/init.d/batman-adv disable

#set empty password for root
(echo ""; sleep 1; echo "") | passwd

ap_ssid=`uci get -q freifunk.settings.ap_ssid`
ah_ssid=`uci get -q freifunk.settings.ah_ssid`
ff_subnet=`uci get -q freifunk.settings.ff_subnet`

# set (not so) magic numbers for start ip and address space
# numbers are ip integer representation
start_ip=$((256*256*$ff_subnet+1)) # -> 1900545
end_ip=$((255*255+253)) # -> 65278


# ------------------------------------------- #
# P R E C O N F I G U R I N G   N E T W O R K #
# ------------------------------------------- # 

echo "(I) Freifunk: Loading N2N Settings"
uci add n2n edge
uci set n2n.@edge[-1].ipaddr="0.0.0.0"
uci set n2n.@edge[-1].supernode="fhaust.de"
uci set n2n.@edge[-1].port=2011
uci set n2n.@edge[-1].community="ffb1"
uci set n2n.@edge[-1].mtu=1528
uci set n2n.@edge[-1].mac="42:DD:AB:AF:6C:94" 


echo "(I) Freifunk: start setup"

wan_interface=`uci -q get network.wan.ifname`
echo "(I) Freifunk: wan interface: '$wan_interface'"

lan_interface=`uci -q get network.lan.ifname`
echo "(I) Freifunk: lan interface: '$lan_interface'"

wifi_device=`uci -q get wireless.@wifi-iface[0].device`
echo "(I) Freifunk: wifi device: '$wifi_device'"

if [ -n "$wifi_device" ]; then
    echo "(I) Freifunk: setup /etc/config/wireless"
    uci set wireless.$wifi_device.channel=1

    #wireless is disabled by default
    uci -q delete wireless.@wifi-device[0].disabled

    #remove all wifi interface entries
    clear_wifi_interfaces() {
        while uci -q delete wireless.@wifi-iface[0]; do :; done
    }
    
    #ad-hoc for batman
    add_ah_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=adhoc
        uci set wireless.@wifi-iface[-1].ssid="$ah_ssid"
        uci set wireless.@wifi-iface[-1].bssid="12:CA:FF:EE:BA:BE"
        uci set wireless.@wifi-iface[-1].hidden=1
    }
    
    #access point for clients
    add_ap_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=ap
        uci set wireless.@wifi-iface[-1].network=mesh
        uci set wireless.@wifi-iface[-1].ssid="$ap_ssid"
    }

    wifi_restart() {
      echo "(I) Freifunk: wireless down/up"                                       
      wifi down                                                                   
      wifi up
    }
    
    record_wifi_interfaces() {
      wifi_ap_interface=`iwconfig 2> /dev/null | awk "/$ap_ssid/ { print \\$1 }"`
      if [ -z "$wifi_ap_interface" ]; then
        wifi_ap_interface=`iwconfig 2> /dev/null | awk "/Mode:Master/ { print \\$1 }"`
      fi
      wifi_ah_interface=`iwconfig 2> /dev/null | awk "/$ah_ssid/ { print \\$1 }"`
    }
    
    clear_wifi_interfaces
    add_ah_interface
    add_ap_interface
    wifi_restart
    record_wifi_interfaces
    
    #if not both interfaces work; try only ad-hoc
    if [ -z "$wifi_ap_interface" -o -z "$wifi_ah_interface" ]; then
      echo "(I) Freifunk: Cannot start ad-hoc and AP mode at the same time - try ad-hoc only now."
      clear_wifi_interfaces
      add_ah_interface
      wifi_restart
      record_wifi_interfaces
    fi
    
    echo "(I) Freifunk: wifi access point interface: '$wifi_ap_interface'"
    echo "(I) Freifunk: wifi ad-hoc interface: '$wifi_ah_interface'"
fi


# ------------------------------------- #
# A S S I G N  I N T E R F A C E S #
# ------------------------------------- # 

if [ -n "$wifi_ah_interface" ]; then
    bat_interfaces="$bat_interfaces $wifi_ah_interface"
fi

if [ -n "$wifi_ap_interface" ]; then
    mesh_interfaces="$mesh_interfaces $wifi_ap_interface"
fi

if [ -n "$lan_interface" ]; then
    if [ -n "$wifi_ah_interface" ]; then
        mesh_interfaces="$mesh_interfaces $lan_interface"
    else
        bat_interfaces="$bat_interfaces $lan_interface"
    fi
fi

#trim variables
trim() { echo $1; }
bat_interfaces=$(trim "$bat_interfaces")
mesh_interfaces=$(trim "$mesh_interfaces")

echo "(I) Freifunk: batman-adv interfaces: '$bat_interfaces'"
echo "(I) Freifunk: mesh interfaces: '$mesh_interfaces'"

if [ -z "$bat_interfaces" ]; then
    echo "(E) Freifunk: No interface for batman-adv found."
    exit 1
fi

#get the mac of the interface that will be used by batman-adv
mesh_mac=$(ifconfig ${bat_interfaces%% *} | grep HWaddr | awk '{print $5}')
echo "(I) Freifunk: mac for mesh: '$mesh_mac'"


mesh_interfaces=$(trim "ff_dummy1 $mesh_interfaces")
bat_interfaces=$(trim "ff_dummy2 $bat_interfaces")

uci set freifunk.settings.bat_interfaces="$bat_interfaces"
uci set freifunk.settings.mesh_interfaces="$mesh_interfaces"
uci set freifunk.settings.mac="$mesh_mac"


# ------------------------------------- #
# C O N F I G U R I N G   N E T W O R K #
# ------------------------------------- # 

echo "(I) Freifunk: setup /etc/config/network"

uci -q delete network.lan

for x in $bat_interfaces; do
    name=`echo "$x" | tr -d -c a-z0-9_`
    uci set network.$name="interface"
    uci set network.$name.ifname=$x
    uci set network.$name.mtu=1528
    uci set network.$name.proto=none
    uci set network.$name.auto=1 #bring up the interface at startup
done

uci set network.mesh="interface"
uci set network.mesh.type="bridge"
uci set network.mesh.ifname="$mesh_interfaces"
uci set network.mesh.ipaddr="0.0.0.0"
#uci set network.mesh.macaddr="$mesh_mac" #does not work
uci set network.mesh.proto=static
uci set network.mesh.netmask="255.0.0.0"


uci -q delete network.wan
if [ -n "$wan_interface" ]; then
    uci set network.wan="interface"
    uci set network.wan.ifname=$wan_interface
    uci set network.wan.proto="dhcp"
fi

echo "(I) Freifunk: setup /etc/config/dhcp"
uci -q delete dhcp.lan
uci set dhcp.@dnsmasq[0].interfaces="br-mesh"
uci set dhcp.mesh=dhcp
uci set dhcp.mesh.interface=mesh
uci set dhcp.mesh.start=$start_ip
uci set dhcp.mesh.limit=$end_ip
uci set dhcp.mesh.leasetime=5m #max time for address conflicts
if [ -z "$wan_interface" ]; then
    uci -q delete dhcp.wan
fi

echo "(I) Freifunk: setup /etc/config/firewall"
while uci -q delete firewall.@forwarding[0]; do :; done #remove lan forwarding
while uci -q delete firewall.@zone[0]; do :; done #remove lan zone

if [ -n "$wan_interface" ];
then
    uci add firewall forwarding
    uci set firewall.@forwarding[-1]="forwarding"
    uci set firewall.@forwarding[-1].src="mesh"
    uci set firewall.@forwarding[-1].dest="wan"

    uci add firewall zone
    uci set firewall.@zone[-1].name=wan
    uci set firewall.@zone[-1].network=wan
    uci set firewall.@zone[-1].input=REJECT
    uci set firewall.@zone[-1].output=ACCEPT
    uci set firewall.@zone[-1].forward=REJECT
    uci set firewall.@zone[-1].masq=1
    uci set firewall.@zone[-1].mtu_fix=1
else
    while uci -q delete firewall.@rule[0]; do :; done
fi

uci add firewall zone
uci set firewall.@zone[-1].name=mesh
uci set firewall.@zone[-1].network=mesh
uci set firewall.@zone[-1].input=ACCEPT
uci set firewall.@zone[-1].output=ACCEPT
uci set firewall.@zone[-1].forward=REJECT

uci set batman-adv.bat0.interfaces="$bat_interfaces"
uci set batman-adv.bat0.gw_mode="client"

uci commit

echo "(I) Freifunk: done"
