#!/usr/bin/haserl
content-type: text/plain

<%
. /www/private/cgi-bin/shared.sh

collect_netnames()
{
    for line in `uci show n2n`; do
        net=`echo "$line" | sed -n -r 's/^n2n\.(.*)\=edge$/\1/p'`
        [ -n "$net" ] && nets="$nets $net"
    done
    strip "$nets"
}

case $GET_func in
    get_configs)
        echo -n "{ "
        c=0
        for name in `collect_netnames`; do
            [ $c -eq 1 ] && echo ", "
            c=1
            echo -n "\"$name\" : "
            export_json "n2n" "$name"
        done
        echo -n " }"
    ;;
    del_config)
        name="$GET_name"
        valid_name "$name"

        uci delete -q n2n.$name
        echo "(I) N2N: Section '$name' deleted."
    ;;
    add_config)
        name="$GET_name"
        valid_name "$name"

        [ `uci get -q n2n.$name` = "edge" ] && { echo "(E) n2n: A conflicting net entry named '$name' already exists."; exit; }

        uci set -q n2n.$name=edge
        uci set -q n2n.$name.enabled=0
        uci set -q n2n.$name.ipaddr="0.0.0.0"
        uci set -q n2n.$name.supernode=" "
        uci set -q n2n.$name.port=" "
        uci set -q n2n.$name.community=" "
        uci set -q n2n.$name.key=" "
        uci set -q n2n.$name.route=" "
        uci set -q n2n.$name.mtu=1528

        echo "(I) n2n: Section '$name' added."

        add_ff_interface "$name"
    ;;
    set_config)
        name="$GET_name"
        valid_name "$name"

        [ `uci get -q n2n.$name` != "edge" ] && { echo "(E) n2n: Section '$name' does not exist."; exit; }

        env_str=`env`
        import_settings "n2n" "$name" "$env_str"
        echo "(I) n2n: Settings set for '$name'."
    ;;
    save_config)
        uci -q commit n2n 2> /dev/null
        echo "(I) N2N: Settings saved. Please reboot."
    ;;
    *)
      echo "(E) N2N: '$GET_func' not implemented."
    ;;
esac
%>
