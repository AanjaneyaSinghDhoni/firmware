#!/usr/bin/haserl
<%

count() { echo $#; }
strip() { echo "$@"; }
ssort() { strip `echo "$@" | tr ' ' '\n' | sort | tr '\n' ' '`; }
ssort_uniq() { strip `echo "$@" | tr ' ' '\n' | sort | uniq | tr '\n' ' '`; }

case $POST_func in
    save_settings)
        uci commit freifunk
    ;;
    get_settings)
        ap_ssid=`uci -q get freifunk.settings.ap_ssid`
        ah_ssid=`uci -q get freifunk.settings.ah_ssid`
        mac=`uci -q get freifunk.settings.mac`
        share_wan=`uci -q get freifunk.settings.share_wan`
        ext_ifs=`uci -q get freifunk.settings.ext_interfaces`
        mesh_ifs=`uci -q get freifunk.settings.mesh_interfaces`
        wan_ifs=`uci -q get freifunk.settings.wan_interfaces`
        
        echo -n "{ \"ap_ssid\" : \"$ap_ssid\", \"ah_ssid\" : \"$ah_ssid\", \"mac\" : \"$mac\", \"share_wan\" : \"$share_wan\", \"ext_ifs\" : \"$ext_ifs\", \"mesh_ifs\" : \"$mesh_ifs\", \"wan_ifs\" : \"$wan_ifs\" }"
    ;;
    set_settings)
        ap_ssid="$POST_ap_ssid"
        ah_ssid="$POST_ah_ssid"
        mac="$POST_mac"
        share_wan="$POST_share_wan"
        ext_ifs=$(ssort "$POST_ext_ifs")
        mesh_ifs=$(ssort "$POST_mesh_ifs")
        wan_ifs=$(ssort "$POST_wan_ifs")
        
        if [ `uci -q get freifunk.settings.ap_ssid` != $ap_ssid ]; then
            if [ ${#ap_ssid} -gt 32 ]; then
                echo "(E) Settings: Invalid Accesspoint name: '$ap_ssid'."
                exit
            fi
            uci -q set freifunk.settings.ap_ssid=$ap_ssid
        fi

        if [ `uci -q get freifunk.settings.ah_ssid` != $ah_ssid ]; then
            if [ ${#ah_ssid} -gt 32 ]; then
                echo "(E) Settings: Invalid Accesspoint name: '$ah_ssid'."
                exit
            fi
            uci -q set freifunk.settings.ah_ssid=$ah_ssid
        fi
        
        if [ `uci -q get freifunk.settings.share_wan` != $share_wan ]; then
            if [ "$share_wan" != "yes" -a "$share_wan" != "no" ]; then
                echo "(E) Settings: yes/no expected for share_wan."
                exit
            fi
            uci -q set freifunk.settings.share_wan=$share_wan
        fi
        
        if [ `uci -q get freifunk.settings.mac` != $mac ]; then
            #check if mac format is valid
            if [ `echo "$mac" | grep -c -E '^[[:xdigit:]]{1,2}(:[[:xdigit:]]{1,2}){5}$'` -eq 0 ]; then
                echo "(E) Settings: Invalid MAC: '$mac'."
                exit
            fi

            #ifconfig dummy_ext hw ether $mac up &> /dev/null
            #ifconfig dummy_mesh hw ether $mac up &> /dev/null
            #ifconfig br-mesh hw ether $mac up &> /dev/null
            #ifconfig br-mesh `/sbin/mac2ip $mac` &> /dev/null

            uci -q set freifunk.settings.mac=$mac
        fi

        if [ $(count $wan_ifs) -gt 1 ]; then
            echo "(E) Settings: Multi-WAN is not yet supported."
            exit
        fi

        all_ifs=$(ssort "$mesh_ifs $ext_ifs $wan_ifs")
        all_ifs_uniq=$(ssort_uniq "$mesh_ifs $ext_ifs $wan_ifs")
        if [ "$all_ifs" != "$all_ifs_uniq" ]; then
            echo "(E) Settings: duplicate entries detected"
            exit
        fi

        for ifce in $all_ifs; do
            ifconfig $ifce &> /dev/null
            [ $? != 0 ] && ( echo "(E) settings: '$ifce' does not exist."; exit )
        done

        uci -q set freifunk.settings.ext_interfaces=$ext_ifs
        uci -q set freifunk.settings.mesh_interfaces=$mesh_ifs
        uci -q set freifunk.settings.wan_interfaces=$wan_ifs
    ;;
    *)
        echo "(E) settings: Invalid command: '$POST_func'"
    ;;
esac
%>
