#!/bin/sh /etc/rc.common

#This script is run at startup and then every 5min using cron.

START=99

start()
{

#Check for Internet access on the WAN port and switch
#batman-adv between client und server mode accordingly.
#This script is called by cron every 5min and by /etc/hotplug.d/net/11-batman.

#prevent script from being called simultaneously
lock_dir=/var/lock/freifunk_watchdog.lock
mkdir $lock_dir || exit

exec >/tmp/freifunk_watchdog.log 2>&1


echo "(I) Start: `date`"

[ "`uci get -q firewall.share_internet`" = "forwarding" ] && \
	share_internet="yes" || share_internet="no"
echo "(I) share internet: '$share_internet'"

wan_interfaces=`uci -q get network.wan.ifname`
wan_interface=${wan_interfaces%% *} #get first interface
echo "(I) wan_interface: '$wan_interface'"

gw_mode=`batctl gw 2> /dev/null`
gw_mode=${gw_mode:0:6}
echo "(I) gw_mode: '$gw_mode'"

addr() {
	ip -$1 address show dev $2 2> /dev/null | sed -rn 's/.*inet6? (.*)\/.*/\1/p' | head -1
}

own_public_ip=`addr 4 br-public`
own_private_ip=`addr 4 br-private`
public_gw_ip=$(mac2ip `batctl gwl 2> /dev/null | awk '/^=>/{ printf $2 }'`)

echo "(I) Own public IP address: '$own_public_ip'"
echo "(I) Own private IP address: '$own_private_ip'"
echo "(I) Public gateway IP address: '$public_gw_ip'"

fastd=`which fastd`


#shuffle a list and pick n entries
pick()
{
	local n=$1; shift;
	local s="`echo \"$@\" | tr ' ' '\n' | awk 'BEGIN { srand() } { print rand() "\t" $0 }' | sort -n | cut -f2- | tr '\n' ' '`"
	get() { shift $(($#-$1)); echo "$@"; }
	get $n $s
}

#ping root servers to check a gateway/interface for internet
check_internet() {
	local dev="$1" gw="$2"
	local addrs="192.33.4.12 128.8.10.90 193.0.14.129 198.41.0.4 192.228.79.201 192.5.5.241 192.36.148.17 192.58.128.30"
	local addr cmd ok

	echo "(I) Try to ping root servers:"
	for addr in `pick 3 $addrs`; do
		cmd="$addr/32 ${gw:+gw $gw} dev $dev"
		echo -n "(I) Ping $addr "
		ip route add $cmd
		ping $addr -c 1 -I $dev -q -W 1 > /dev/null; ok=$?;
		ip route del $cmd
		if [ $ok -eq 0 ]; then
			echo "- success."
			return 0
		else
			echo "- failed."
		fi
	done
	echo "(W) Cannot reach any tested IP."
	return 1
}

#check/establish internet on wan
check_wan()
{
	local wan="$1"
	echo "(I) Check if Internet is accessible via '$wan'."

	[ -z "$wan" ] && {
		echo "(I) No wan interfaces found."
		return 1
	}

	check_internet "$wan" && return 0

	echo "(I) Trying to aquire new DHCP lease."
	local pid=`cat /var/run/udhcpc-$wan.pid`
	kill -s SIGUSR2 $pid #release lease
	kill -s SIGUSR1 $pid #get new lease

	check_internet "$wan" && return 0

	echo "(W) No internet detected."
	ip addr flush dev $wan
	return 1
}

is_running() {
  ps | grep -v grep | grep "$1" > /dev/null
}

#switch to client
mesh_client()
{
	if [ "$gw_mode" != "client" ]; then
		echo "(I) Switch to client mode."
		batctl gw client
		/etc/init.d/nodogsplash stop > /dev/null
	else
		echo "(I) Already in client mode."
	fi
}

#switch to server
mesh_server()
{
	if [ "$gw_mode" != "server" ]; then
		echo "(I) Switch to gateway mode."
		/etc/init.d/nodogsplash start > /dev/null
		batctl gw server
	else
		echo "(I) Already in gateway mode."
	fi
}

#Configure the DHCP server and routing table.
set_routes()
{
	local has_internet="$1"
	local public_str="3"
	local private_str="3,$own_private_ip"

	echo "(I) Start setting routes:"
	[ "$share_internet" = "yes" ] && public_str="3,$own_public_ip"
	[ -n "$public_gw_ip" ] && public_str="3,$public_gw_ip"

	[ -n "$public_gw_ip" ] && {
		ip route del 10.0.0.0/8
		ip route del 172.16.0.0/12
		ip route del 104.0.0.0/8
		ip route del 105.0.0.0/8
		ip route add 10.0.0.0/8 via $public_gw_ip
		ip route add 172.16.0.0/12 via $public_gw_ip
		ip route add 104.0.0.0/8 via $public_gw_ip
		ip route add 105.0.0.0/8 via $public_gw_ip

	}

	if [ "$has_internet" = "yes" ]; then
		if [ "$share_internet" = "yes" ]; then
			public_str="3,$own_public_ip"
		fi
	else
		echo "(I) Clear default routes and nameserver list."
		while `route del default > /dev/null 2>&1`; do true; done
		echo -e "nameserver 127.0.0.1" > /tmp/resolv.conf.auto

		[ -n "$public_gw_ip" ] && {
			echo "(I) Set default route and nameserver to '$public_gw_ip'."
			ip route add default via $public_gw_ip
        	        ip route del 10.0.0.0/8
                	ip route del 172.16.0.0/12
                	ip route del 104.0.0.0/8
                	ip route del 105.0.0.0/8
			echo "nameserver $public_gw_ip" >> /tmp/resolv.conf.auto
		}
	fi

	local pre_public_str="`uci get dhcp.public.dhcp_option`"
	local pre_private_str="`uci get dhcp.private.dhcp_option`"

	if [ "$public_str" != "$pre_public_str" -o "$private_str" != "$pre_private_str" ]
	then
		uci set dhcp.public.dhcp_option="$public_str"
		uci set dhcp.private.dhcp_option="$private_str"

		echo "(I) DHCP settings were changed => restart dnsmasq."
		/etc/init.d/dnsmasq restart
	else
		echo "(I) No change of DHCP settings."
	fi

	echo "(I) DHCP private options: '$private_str'"
	echo "(I) DHCP public option: '$public_str'"
}


check_wan "$wan_interface" && has_internet="yes" || has_internet="no"

#log internet status for the web-gui
echo -n "$has_internet" > /tmp/has_internet

if [ "$has_internet" = "yes" ]
then
	echo "(I) We have local internet."
	set_routes "yes"

	is_running "$fastd" || /etc/init.d/fastd start

	[ "$share_internet" = "yes" ] && mesh_server || mesh_client
else
	echo "(I) We do not have local internet."
	set_routes "no"

	is_running "$fastd" && /etc/init.d/fastd stop

	mesh_client
fi


rmdir /var/lock/freifunk_watchdog.lock
echo "(I) Done."
}
