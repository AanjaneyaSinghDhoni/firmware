#!/bin/sh /etc/rc.common

# TODO:
# - preconfigure mesh, request address, configure mesh
# - create debug toggle
# - add n2n


START=96


start () {

ap_ssid="www.freifunk-bielefeld.de"
ah_ssid="batman.freifunk-bielefeld.de"
ff_subnet=29
debug=0

# set (not so) magic numbers for start ip and address space
# numbers are ip integer representation
start_ip=$((256*256*$ff_subnet+1)) # -> 1900545
end_ip=$((255*255+253)) # -> 65278

#write everything from stdout and stderr to a log file
exec >/tmp/freifunk.log 2>&1
date


# ------------------------------------------------------- #
# R E V O K E   D E F A U L T   C O N F I G U R A T I O N #
# ------------------------------------------------------- # 

echo "(I) Freifunk: stop /etc/init.d/nodogsplash"
/etc/init.d/nodogsplash stop

echo "(I) Freifunk: stop /etc/init.d/batman-adv"
/etc/init.d/batman-adv stop

echo "(I) Freifunk: stop /etc/init.d/dnsmasq"
/etc/init.d/dnsmasq stop

echo "(I) Freifunk: stop /etc/init.d/firewall"
/etc/init.d/firewall stop

echo "(I) Freifunk: stop /etc/init.d/network"
/etc/init.d/network stop


# ------------------------------------------- #
# P R E C O N F I G U R I N G   N E T W O R K #
# ------------------------------------------- # 

echo "(I) Freifunk: start setup"

wan_interface=`uci -q get network.wan.ifname`
echo "(I) Freifunk: wan interface: '$wan_interface'"

lan_interface=`uci -q get network.lan.ifname`
echo "(I) Freifunk: lan interface: '$lan_interface'"

wifi_device=`uci -q get wireless.@wifi-iface[0].device`
echo "(I) Freifunk: wifi device: '$wifi_device'"

if [ -n "$wifi_device" ]; then
    echo "(I) Freifunk: setup /etc/config/wireless"
    uci set wireless.$wifi_device.channel=1

    #wireless is disabled by default
    uci -q delete wireless.@wifi-device[0].disabled

    #remove all wifi interface entries
    clear_wifi_interfaces() {
        while uci -q delete wireless.@wifi-iface[0]; do :; done
    }
    
    #ad-hoc for batman
    add_ah_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=adhoc
        uci set wireless.@wifi-iface[-1].ssid="$ah_ssid"
        uci set wireless.@wifi-iface[-1].bssid="12:CA:FF:EE:BA:BE"
        uci set wireless.@wifi-iface[-1].hidden=1
    }
    
    #access point for clients
    add_ap_interface() {
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].device="$wifi_device"
        uci set wireless.@wifi-iface[-1].mode=ap
        uci set wireless.@wifi-iface[-1].network=mesh
        uci set wireless.@wifi-iface[-1].ssid="$ap_ssid"
    }

    wifi_restart() {
      echo "(I) Freifunk: wireless down/up"                                       
      wifi down                                                                   
      wifi up
    }
    
    record_wifi_interfaces() {
      wifi_ap_interface=`iwconfig 2> /dev/null | awk "/Mode:Master/ { print \\$1 }"`   
      wifi_ah_interface=`iwconfig 2> /dev/null | awk "/$ah_ssid/ { print \\$1 }"`
    }
    
    clear_wifi_interfaces
    add_ah_interface
    add_ap_interface
    wifi_restart
    record_wifi_interfaces
    
    #if not both interfaces work; try only ad-hoc
    if [ -z "$wifi_ap_interface" -o -z "$wifi_ah_interface" ]; then
      clear_wifi_interfaces
      add_ah_interface
      wifi_restart
      record_wifi_interfaces
    fi
    
    echo "(I) Freifunk: wifi access point interface: '$wifi_ap_interface'"
    echo "(I) Freifunk: wifi ad-hoc interface: '$wifi_ah_interface'"
fi


if [ -n "$wifi_ah_interface" ]; then
    #ad-hoc wifi interface is up
    bat_interface=$wifi_ah_interface
    other_interface=$lan_interface
elif [ -n "$lan_interface" ]; then
    #lan interface is up
    bat_interface=$lan_interface
    other_interface=$wifi_ah_interface
else
  echo "(E) Freifunk: No interface for batman found."
  exit 1
fi
echo "(I) Freifunk: interface for batman: '$bat_interface'"
echo "(I) Freifunk: other interface for batman: '$other_interface'"


# ------------------------------------- #
# C O N F I G U R I N G   N E T W O R K #
# ------------------------------------- # 

echo "(I) Freifunk: setup /etc/config/network"
uci -q delete network.lan
uci set network.mesh="interface"
uci set network.mesh.type="bridge"
uci set network.mesh.ifname="bat0 $other_interface"
uci set network.mesh.mtu="1528"
uci set network.mesh.ipaddr="10.$ff_subnet.1.1"
uci set network.mesh.proto=static
uci set network.mesh.netmask="255.0.0.0"

echo "(I) Freifunk: setup /etc/config/dhcp"
uci -q delete dhcp.lan
uci set dhcp.mesh=dhcp
uci set dhcp.mesh.interface=mesh
uci set dhcp.mesh.start=$start_ip
uci set dhcp.mesh.limit=$end_ip
uci set dhcp.mesh.leasetime=5m
# fho: changed leasetime from 12h to 5m -> max time for address conflicts

echo "(I) Freifunk: setup /etc/config/firewall"
while uci -q delete firewall.@forwarding[0]; do :; done #remove lan forwarding
uci add firewall forwarding
uci set firewall.@forwarding[-1]="forwarding"
uci set firewall.@forwarding[-1].src="mesh"
uci set firewall.@forwarding[-1].dest="wan"

while uci -q delete firewall.@zone[0]; do :; done #remove lan zone
uci add firewall zone
uci set firewall.@zone[-1].name=wan
uci set firewall.@zone[-1].network=wan
uci set firewall.@zone[-1].input=REJECT
uci set firewall.@zone[-1].output=ACCEPT
uci set firewall.@zone[-1].forward=REJECT
uci set firewall.@zone[-1].masq=1
uci set firewall.@zone[-1].mtu_fix=1

uci add firewall zone
uci set firewall.@zone[-1].name=mesh
uci set firewall.@zone[-1].network=mesh
uci set firewall.@zone[-1].input=ACCEPT
uci set firewall.@zone[-1].output=ACCEPT
uci set firewall.@zone[-1].forward=REJECT

ifconfig $bat_interface mtu 1528
uci set batman-adv.bat0.interfaces="$bat_interface"
uci set batman-adv.bat0.gw_mode="client"


# -------------------------------- #
# S T A R T I N G  S E R V I C E S #
# -------------------------------- # 

echo "(I) Freifunk: restart /etc/init.d/network"
/etc/init.d/network restart

echo "(I) Freifunk: restart /etc/init.d/firewall"
/etc/init.d/firewall restart

echo "(I) Freifunk: restart /etc/init.d/dnsmasq"
/etc/init.d/dnsmasq restart

echo "(I) Freifunk: restart batman on '$bat_interface'"
/etc/init.d/batman-adv restart


# ------------------------------- #
# G E T   M E S H   A D D R E S S #
# ------------------------------- # 

# use the same algorithm as dnsmasq for generating address

# create seed from batman interface mac
bat_mac=$(ifconfig $bat_interface | grep HWaddr | awk '{print $5}')
echo "(D) Freifunk: batman interface mac: '$bat_mac'"

#method for ip generation was taken from dnsmasq
seed=0
for x in $(echo $bat_mac | tr ":" "\n"); do
	seed=$((seed + 0x$x + (0x$x << 8) + (0x$x << 16)))
done

addr_t=$((start_ip + (seed % end_ip)))

addr=""
while [ -z "$addr" ]; do
    addr_c=$(((addr_t & 0xff00) >> 8))
    addr_d=$(((addr_t & 0x00ff) >> 0))

    addr="10.$ff_subnet.$addr_c.$addr_d"

    echo "(D) Freifunk: testing address '$addr'"

    arping -c 5 -D -f -q -I br-mesh $addr

    if [ $? -eq 0 ]; then
        mesh_ip="$addr"
        echo "(I) Freifunk: mesh_ip: '$mesh_ip'"
    else
        echo "(D) Freifunk: address taken"
        addr_t=$((addr_t+1))
        addr=""
    fi
done

ifconfig br-mesh $mesh_ip


if [ $debug -eq 1 ]; then
  #debug code to identify routers by ssid
  if [ -n "$wifi_ap_interface" ]; then
    #TODO: only set ap interface, not just the last one
    uci set wireless.@wifi-iface[-1].ssid="${ap_ssid:4}_${mesh_ip:6}"
    wifi down
    wifi up
  fi
fi

#check wan interface for internet
/sbin/wan_watchdog


# ------- #
# D O N E #
# ------- # 

echo "(I) Freifunk: done"
}
