#!/bin/sh /etc/rc.common

#This script is run once at startup and is then deleted.

START=99

#create an IPv6 ULA-address based on EUI-64
ula_addr() {
	local PREFIX6="$(uci get network.globals.ula_prefix)"
	local mac=$1

	# translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a ^ 2)) #invert second least significant bit
	a=`printf '%02x\n' $a` #convert back to hex
	mac="$a:${mac#*:}" #reassemble mac

	mac=${mac//:/} # remove ':'
	mac=${mac:0:6}fffe${mac:6:6} # insert ffee
	mac=`echo $mac | sed 's/..../&:/g'` # insert ':'

	# assemble IPv6 address
	echo "${PREFIX6%%::*}:${mac%?}"
}

initial_wifi_setup()
{
	echo "(I) Setup /etc/config/wireless"

	#default SSID
	ap_ssid=`uci get freifunk.@settings[0].default_ap_ssid`

	#add batman version to the AdHoc interface SSID
	ah_ssid=`uci get freifunk.@settings[0].default_ah_ssid`

	#default BSSID
	ah_bssid=`uci get freifunk.@settings[0].default_ah_bssid`

	#delete all wifi interfaces
	while uci -q delete wireless.@wifi-iface[0]; do :; done

	#test if we can span both Ad-Hoc and Access Point interfaces
	config_wifi() {
		local ds="$1" #device section
		local ah_ok=0 ap_ok=0 #interface status
		local wifi_device=`uci get -q wireless.$ds.device`

		#config_get wifi_device "$ds" device
		[ -z "$wifi_device" ] && wifi_device="$ds"

		echo "(I) Configure wifi device: '$wifi_device'"

		if [ `uci get wireless.$ds.channel` -gt 35 ]; then
			uci set wireless.$ds.channel=36
		else
			uci set wireless.$ds.channel=1
		fi

		uci set wireless.$ds.country=DE
		uci set wireless.$ds.disabled=0

		#remove ap/ah wifi interface entries
		clear_wifi_interfaces() {
			uci -q delete wireless.@wifi-iface[-1]
			uci -q delete wireless.@wifi-iface[-1]
		}

		#Ad-Hoc for batman
		add_ah_interface() {
			local s=wireless.`uci add wireless wifi-iface`
			uci set $s.device="$wifi_device"
			uci set $s.ifname="${wifi_device}_mesh"
			uci set $s.mode=adhoc
			uci set $s.ssid="$ah_ssid"
			uci set $s.bssid="$ah_bssid"
			uci set $s.hidden=1
		}

		#Access Point for clients
		add_ap_interface() {
			local s=wireless.`uci add wireless wifi-iface`
			uci set $s.device="$wifi_device"
			uci set $s.ifname="${wifi_device}_public"
			uci set $s.mode=ap
			uci set $s.network=public
			uci set $s.ssid="$ap_ssid"
			uci set $s.encryption="none"
		}

		wifi_restart() {
			echo "(I) Wireless down/up"
			wifi reload
			sleep 5
		}

		check_wifi_interfaces() {
			ip addr list dev "${wifi_device}_mesh" &> /dev/null && ah_ok=1 || ah_ok=0
			ip addr list dev "${wifi_device}_public" &> /dev/null && ap_ok=1 || ap_ok=0
		}

		add_ah_interface
		add_ap_interface
		wifi_restart
		check_wifi_interfaces

		#if not both interfaces work; try only Ad-Hoc
		if [ $ah_ok -eq 0 -o $ap_ok -eq 0 ]; then
			echo "(I) Cannot start Ad-Hoc and Access Point mode at the same time - try AdHoc only now."
			clear_wifi_interfaces
			add_ah_interface
			wifi_restart
			check_wifi_interfaces
		fi

		[ $ah_ok -eq 1 ] && append wifi_mesh_interfaces "${wifi_device}_mesh"
		[ $ap_ok -eq 1 ] && append wifi_public_interfaces "${wifi_device}_public"
	}

	config_load wireless
	config_foreach config_wifi wifi-device

	echo "(I) Wifi access point interfaces: '$wifi_public_interfaces'"
	echo "(I) Wifi ad-hoc interfaces: '$wifi_mesh_interfaces'"
}

initial_private_setup()
{
	local private_interfaces="$1"
	echo "(I) Setup private network interfaces."

	uci delete -q network.lan
	uci delete -q network.private
	uci set network.private="interface"
	uci set network.private.type="bridge"
	uci set network.private.ifname="$private_interfaces"
	uci set network.private.ipaddr="192.168.133.1"
	uci delete -q network.private.ip6addr
	uci set network.private.proto=static
	uci set network.private.netmask="255.255.255.0"
	uci set network.private.igmp_snooping="0"
	uci set network.private.force_link="1"
	uci set network.private.bridge_empty="1"
}

initial_public_setup()
{
	local public_interfaces="$1" mac="$2"
	echo "(I) Setup public interfaces."

	uci delete -q network.public
	uci set network.public="interface"
	uci set network.public.type="bridge"
	uci set network.public.ifname="$public_interfaces"
	uci set network.public.ipaddr="192.168.132.1"
	uci set network.public.macaddr="$mac"
	uci delete -q network.public.ip6addr
	uci add_list network.public.ip6addr="$(ula_addr $mac)/64"
	uci set network.public.proto=static
	uci set network.public.netmask="255.255.255.0"
	uci set network.public.igmp_snooping="0"
	uci set network.public.force_link="1"
	uci set network.public.bridge_empty="1"

	uci set network.public6="interface"
	uci set network.public6.ifname="@public"
	uci set network.public6.peerdns="0"
	uci set network.public6.proto="dhcpv6"
}

initial_wan_setup()
{
	local wan_interfaces="$1"
	echo "(I) Setup WAN interfaces."

	uci -q delete network.wan
	uci -q delete network.wan6

	uci set network.wan="interface"
	uci set network.wan.type="bridge"
	uci set network.wan.ifname="$wan_interfaces"
	uci set network.wan.proto="dhcp"
	uci set network.wan.bridge_empty="1"

	uci set network.wan6="interface"
	uci set network.wan6.ifname="@wan"
	uci set network.wan6.proto="dhcpv6"
}

initial_setup()
{
	version="$1"

	wan_interface=$(uci get -q network.wan.ifname)
	echo "(I) WAN interface: '$wan_interface'"

	private_interface=$(uci get -q network.lan.ifname)
	echo "(I) Private interface: '$private_interface'"

	ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`
	echo "(I) AdHoc SSID: '$ah_ssid'"

	echo "(I) Set empty root password."
	(echo ""; sleep 1; echo "") | passwd > /dev/null

	#get a unique (but not just random) mac to identify the node
	mac=`cat /sys/class/ieee80211/phy0/macaddress`
	[ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ] && {
		mac=$(ip addr list dev eth0 | awk '/ether/{print $2}')
	}
	#translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a | 2)) #set second bit to 1
	a=`printf '%02x\n' $a` #convert to hex
	mac="$a:${mac#*:}" #reassemble mac

	echo "(I) MAC: '$mac'"

	echo "(I) Set Prefix and populate /etc/hosts."
	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="fdef:17a0:ffb1:300::/64"
	echo "192.168.132.1 node" >> /etc/hosts
	echo "$(ula_addr $mac) node" >> /etc/hosts

	# ------------------------------------- #
	# F R E I F U N K  S E T U P #
	# ------------------------------------- #

	uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"
	uci set freifunk.@settings[0].version="$version"

	# ------------------------------------------- #
	# S E T U P  W I R E L E S S #
	# ------------------------------------------- #

	initial_wifi_setup

	# ------------------------------------- #
	# P R I V A T E  S E T U P #
	# ------------------------------------- #

	initial_private_setup "$private_interface"

	# ------------------------------------- #
	# P U B L I C  S E T U P #
	# ------------------------------------- #

	initial_public_setup "bat0 $wifi_public_interfaces" "$mac"

	# ------------------------------------- #
	# W A N  S E T U P #
	# ------------------------------------- #

	initial_wan_setup "$wan_interface"

	# ------------------------------------- #
	# B A T M A N  S E T U P #
	# ------------------------------------- #

	echo "(I) Add network sections to trigger batman-adv and set MTU."
	for if in fastd_mesh $wifi_mesh_interfaces; do
		local n=`echo -n $if | tr -c a-z0-9_ _`
		uci set network.$n="interface"
		uci set network.$n.ifname=$if
		uci set network.$n.mtu=1406
		uci set network.$n.auto=1
		uci set network.$n.proto="batadv"
		uci set network.$n.mesh="bat0"
	done

	#save defaults for use in the web-ui
	cp /etc/config/network /etc/config/network_defaults

	echo -e "\n#disable forwarding in roder for router-solicitations to be send for these interfaces" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-public.forwarding=0" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-private.forwarding=0" >> /etc/sysctl.conf

	echo "(I) Generate a key for fastd."
	secret=`fastd --generate-key --machine-readable`
	uci set fastd.default.secret="$secret"
	key=`echo "secret \"$secret\";" | fastd --config - --show-key --machine-readable`
	uci set fastd.default.key="$key"

	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'

	#write everything to flash
	uci commit
}

update_03_to_04()
{
	echo "(I) Copy/delete some files."
	cp /rom/etc/config/autoupdater /etc/config/
	cp /rom/etc/config/dhcp /etc/config/
	cp /rom/etc/config/firewall /etc/config/
	cp /rom/etc/config/batman-adv /etc/config/
	cp /rom/etc/crontabs/root /etc/crontabs/
	cp /rom/etc/firewall.user /etc/
	cp /rom/etc/dnsmasq.conf /etc/
	cp /rom/etc/sysctl.conf /etc/
	cp /rom/etc/profile /etc/
	cp /rom/etc/inittab /etc/
	cp /rom/etc/uhttpd.crt /etc/
	cp /rom/etc/uhttpd.key /etc/
	rm /etc/config/6relayd

	echo "(I) Update fastd configuration."
	fastd_secret=$(uci get set fastd.default.secret)
	fastd_key=$(uci get fastd.default.key)
	cp /rom/etc/config/fastd /etc/config/
	uci set fastd.default.secret="$fastd_secret"
	uci set fastd.default.key="$fastd_key"

	#set new ad-hoc SSID
	ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`
	mac=$(uci get -q freifunk.@settings[0].mac)
	wan_proto=$(uci get -q network.wan.proto)
	wan_ipaddr=$(uci get -q network.wan.ipaddr)
	wan_gateway=$(uci get -q network.wan.gateway)

	echo "(I) Set Prefix and populate /etc/hosts."
	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="fdef:17a0:ffb1:300::/64"
	echo "192.168.132.1 node" >> /etc/hosts
	echo "$(ula_addr $mac) node" >> /etc/hosts

	echo "(I) Disable forwarding on br-public/br-private."
	echo -e "\n#disable forwarding in roder for router-solicitations to be send for these interfaces" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-public.forwarding=0" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-private.forwarding=0" >> /etc/sysctl.conf

	echo "(I) Remove dummy interfaces."
	uci delete -q network.dummy_mesh
	uci delete -q network.dummy_private
	uci delete -q network.dummy_public

	echo "(I) Rebuild public/private/wan sections."
	ifname=$(uci get -q network.public.ifname)
	initial_public_setup "${ifname/dummy_public/}" "$mac"

	ifname=$(uci get -q network.private.ifname)
	initial_private_setup "${ifname/dummy_private/}"

	ifname=$(uci get -q network.wan.ifname)
	initial_wan_setup "$ifname"

	wireless_change_ssid() {
		local cfg="$1" ssid mode
		config_get mode $cfg "mode"

		if [ "$mode" = "adhoc" ]; then
			uci set wireless.$cfg.ssid="$ah_ssid"
		fi
	}

	wireless_fixup_iface() {
		local cfg="$1" hwmode type
		config_get type $cfg "type"
		config_get hwmode $cfg "hwmode"

		uci delete -q wireless.$cfg.ht_capab

		if [ "$type" = "mac80211" ]; then
			uci set wireless.$cfg.wds="1"
		fi

		if [ "$hwmode" = "11ng" ]; then
			uci set wireless.$cfg.hwmode="11g"
		fi
	}

	network_change_mtu() {
		local cfg="$1" mtu
		config_get mtu $cfg "mtu"

		if [ "$mtu" = "1426" ]; then
			uci set network.$cfg.mtu="1406"
		fi
	}

	[ -n "$wan_proto" ] && uci set network.wan.proto="$wan_proto"
	[ -n "$wan_ipaddr" ] && uci set network.wan.ipaddr="$wan_ipaddr"
	[ -n "$wan_gateway" ] && uci set network.wan.gateway="$wan_gateway"

	echo "(I) Update network/wireless settings."
	config_load network
	config_foreach network_change_mtu interface
	uci commit network

	config_load wireless
	config_foreach wireless_change_ssid wifi-iface
	config_foreach wireless_fixup_iface wifi-device
	uci commit wireless

	echo "(I) Update /etc/config/freifunk"
	hostname="$(uci get system.@system[0].hostname)"
	access_from="$(uci get freifunk.@settings[0].config_nets)"
	default_ap_ssid="$(uci get freifunk.@settings[0].default_ap_ssid)"

	cp /rom/etc/config/freifunk /etc/config/
	cp /rom/etc/config/system /etc/config/

	uci set fastd.default.mtu="1406"
	uci set system.@system[0].hostname="$hostname"
	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'
	uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"
	uci set freifunk.@settings[0].access_from="$access_from"
	uci set freifunk.@settings[0].version="$to_version"
	uci set freifunk.@settings[0].version="$default_ap_ssid"

	uci commit fastd
	uci commit system
	uci commit freifunk
}

start()
{
	#Setup the system for the initial Freifunk configuration.
	#This script is only run once and deletes itself at the end.

	exec >/root/freifunk_setup.log 2>&1
	. /lib/functions.sh

	echo "(I) Start freifunk_setup"

	from_version="$(uci get -q freifunk.@settings[0].version)"
	to_version="0.4-dev"

	echo "(I) Update from '$from_version' to '$to_version'"
	case "$from_version" in
		"0.3" | "0.3.1")
			echo "(I) Apply update."
			update_03_to_04
			/etc/init.d/fastd enable
			/etc/init.d/telnet disable
			;;
		"")
			echo "(I) Start initial setup."
			initial_setup "$to_version"
			/etc/init.d/fastd disable
			/etc/init.d/telnet disable
			;;
		*)
			echo "(E) Unknown version => Skip setup."
			;;
	esac

	#disable and remove this script
	/etc/init.d/freifunk_setup disable
	rm -f /etc/init.d/freifunk_setup

	echo "(I) Done - rebooting now."
	reboot
}
