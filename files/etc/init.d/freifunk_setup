#!/bin/sh /etc/rc.common

#This script is run once at startup and is then deleted.

START=98


start()
{
#Setup the system for the initial Freifunk configuration.
#This script is only run once and deletes itself.

exec >/root/freifunk_setup.log 2>&1
. /lib/functions.sh

echo "(I) start freifunk_setup"


#set empty password for root
(echo ""; sleep 1; echo "") | passwd

#default SSID
ap_ssid=`uci get freifunk.@settings[0].default_ap_ssid`

#add batman version to the AdHoc interface SSID
ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`

#default BSSID
ah_bssid=`uci get freifunk.@settings[0].default_ah_bssid`

wan_interface=`uci get network.wan.ifname`
echo "(I) wan interface: '$wan_interface'"

lan_interface=`uci get network.lan.ifname`
echo "(I) lan interface: '$lan_interface'"

ff_subnet=`uci get freifunk.@settings[0].ff_subnet`

lan_ip="192.168.133.1"


# ------------------------------------------- #
# S E T U P  W I R E L E S S #
# ------------------------------------------- # 

echo "(I) setup /etc/config/wireless"

while uci -q delete wireless.@wifi-iface[0]; do :; done

#test if we can span both Ad-Hoc and Access Point interfaces
config_wifi() {
	local ds="$1" #device section
	local ah_ok=0 ap_ok=0 #interface status
	local wifi_device=`uci get wireless.$ds.device`

	#config_get wifi_device "$ds" device
	[ -z "$wifi_device" ] && wifi_device="$ds"

	echo "(I) configure wifi device: '$wifi_device'"

	if [ `uci get wireless.$ds.channel` -gt 35 ]; then
		ssid_suffix="_5GHz"
		uci set wireless.$ds.channel=36
	else
		ssid_suffix=""
		uci set wireless.$ds.channel=1
	fi

	uci set wireless.$ds.country=DE
	uci set wireless.$ds.disabled=0

	#remove ap/ah wifi interface entries
	clear_wifi_interfaces() {
		uci -q delete wireless.@wifi-iface[-1]
		uci -q delete wireless.@wifi-iface[-1]
	}

	#Ad-Hoc for batman
	add_ah_interface() {
		local s=wireless.`uci add wireless wifi-iface`
		uci set $s.device="$wifi_device"
		uci set $s.ifname="${wifi_device}_bat"
		uci set $s.mode=adhoc
		uci set $s.ssid="$ah_ssid$ssid_suffix"
		uci set $s.bssid="$ah_bssid"
		uci set $s.hidden=1
	}

	#Access Point for clients
	add_ap_interface() {
		local s=wireless.`uci add wireless wifi-iface`
		uci set $s.device="$wifi_device"
		uci set $s.ifname="${wifi_device}_mesh"
		uci set $s.mode=ap
		uci set $s.network=mesh
		uci set $s.ssid="$ap_ssid$ssid_suffix"
		uci set $s.encryption="none"
	}

	wifi_restart() {
		echo "(I) wireless down/up"
		wifi
	}

	check_wifi_interfaces() {
		ifconfig "${wifi_device}_bat" &> /dev/null && ah_ok=1 || ah_ok=0
		ifconfig "${wifi_device}_mesh" &> /dev/null && ap_ok=1 || ap_ok=0
	}

	add_ah_interface
	add_ap_interface
	wifi_restart
	check_wifi_interfaces

	#if not both interfaces work; try only Ad-Hoc
	if [ $ah_ok -eq 0 -o $ap_ok -eq 0 ]; then
		echo "(I) Cannot start Ad-Hoc and Access Point mode at the same time - try AdHoc only now."
		clear_wifi_interfaces
		add_ah_interface
		wifi_restart
		check_wifi_interfaces
	fi

	[ $ah_ok -eq 1 ] && append wifi_bat_interfaces "${wifi_device}_bat"
	[ $ap_ok -eq 1 ] && append wifi_mesh_interfaces "${wifi_device}_mesh"
}

config_load wireless
config_foreach config_wifi wifi-device

echo "(I) wifi access point interfaces: '$wifi_mesh_interfaces'"
echo "(I) wifi ad-hoc interfaces: '$wifi_bat_interfaces'"


#get a unique (but not just random) mac to identify the node
mesh_mac=`cat /sys/class/ieee80211/phy0/macaddress`
[ -z "$mesh_mac" -o "$mesh_mac" = "00:11:22:33:44:55" ] && {
	mesh_mac=$(ifconfig $lan_interface | grep HWaddr | awk '{print $5}')
}
#translate to local administered mac
a=${mesh_mac%%:*} #cut out first hex
a=$((0x$a | 2)) #set second bit to 1
a=`printf '%02x\n' $a` #convert to hex
mesh_mac="$a:${mesh_mac#*:}" #reassemble mac
mesh_ip=`mac2ip $mesh_mac`

echo "(I) MAC for mesh: '$mesh_mac'"
echo "(I) IP for mesh: '$mesh_ip'"


# ------------------------------------- #
# L A N  S E T U P #
# ------------------------------------- #

echo "(I) Setup LAN interfaces."

uci -q delete network.lan
uci set network.lan="interface"
uci set network.lan.type="bridge"
uci set network.lan.ifname="dummy_lan $lan_interface"
uci set network.lan.ipaddr="$lan_ip"
uci set network.lan.proto=static
uci set network.lan.netmask="255.255.255.0"

uci -q delete dhcp.lan
uci set dhcp.lan=dhcp
uci set dhcp.lan.interface=lan
uci set dhcp.lan.start=100
uci set dhcp.lan.limit=150
uci set dhcp.lan.leasetime=12h
uci set dhcp.lan.dhcp_option="3" #no gateway yet


# ------------------------------------- #
# M E S H  S E T U P #
# ------------------------------------- #

echo "(I) Setup MESH interfaces."

uci set network.mesh="interface"
uci set network.mesh.type="bridge"
uci set network.mesh.ifname="dummy_mesh bat0 $wifi_mesh_interfaces"
uci set network.mesh.ipaddr="$mesh_ip"
uci set network.mesh.proto=static
uci set network.mesh.netmask="255.0.0.0"


# set (not so) magic numbers for start ip and address space
# numbers are ip integer representation
start_ip=$((256*256*$ff_subnet+1)) # -> 1900545
end_ip=$((255*255+253)) # -> 65278

#we don't want a local domain for this network
uci -q delete dhcp.@dnsmasq[0].local
uci -q delete dhcp.@dnsmasq[0].domain

uci set dhcp.mesh=dhcp
uci set dhcp.mesh.interface=mesh
uci set dhcp.mesh.start=$start_ip
uci set dhcp.mesh.limit=$end_ip
uci set dhcp.mesh.leasetime=2h #max time for address conflicts
uci set dhcp.mesh.dhcp_option="3" #no gateway yet


# ------------------------------------- #
# W A N  S E T U P #
# ------------------------------------- #

echo "(I) Setup WAN interface."

uci -q delete network.wan
uci set network.wan="interface"
uci set network.wan.ifname="$wan_interface"
uci set network.wan.proto="dhcp"

uci -q delete dhcp.wan
uci set dhcp.wan=dhcp
uci set dhcp.wan.interface=wan
uci set dhcp.wan.ignore=1


# ------------------------------------- #
# B A T M A N  S E T U P #
# ------------------------------------- #

echo "(I) Add network sections to trigger batman-adv and set mtu."
for if in dummy_bat fastd_bat $wifi_bat_interfaces; do
	local n=`echo -n $if | tr -c a-z0-9_ _`
	uci set network.$n="interface"
	uci set network.$n.ifname=$if
	uci set network.$n.mtu=1528
	uci set network.$n.auto=1
	uci set network.$n.proto="batadv"
	uci set network.$n.mesh="bat0"
done


# ------------------------------------- #
# F R E I F U N K  S E T U P #
# ------------------------------------- #

uci set freifunk.@settings[0].mac="$mesh_mac"
uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"

#prevent own hostname as DNS entry
uci set dhcp.@dnsmasq[0].add_local_domain='0'
uci set dhcp.@dnsmasq[0].add_local_hostname='0'

#make "node" resolve to the node a client is connected to
echo "$lan_ip node" >> /etc/hosts
echo "$mesh_ip node" >> /etc/hosts


/etc/init.d/nodogsplash disable
/etc/init.d/fastd disable
/etc/init.d/telnet disable

#generate a private key for fastd
secret=`fastd --generate-key --machine-readable`
uci  set fastd.default.secret="$secret"

#write everything to flash
uci commit

echo "(I) done freifunk_setup - rebooting now."

rm /etc/init.d/freifunk_setup
reboot
}
