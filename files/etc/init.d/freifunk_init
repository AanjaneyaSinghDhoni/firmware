#!/bin/sh /etc/rc.common

START=19


#enable&configure KadNode if the hostname ends with .p2p
config_kadnode() {
	local hostname

	hostname="`uci get -q system.@system[0].hostname`"

	find_section() {
		local s="$1"
		local hostname="$2"
		local ifce

		#make sure we got the right section
		config_get ifce "$s" "ifce"
		[ "$ifce" = "br-public" ] || return 0

		uci set kadnode.$s.enable="1"

		#make sure the entry is not already present
		config_get value_id "$s" "value_id"
		list_contains value_id "$hostname" && return 0

		uci add_list kadnode.$s.value_id="$hostname"
		return 1
	}

	#check the TLD
	if [ "${hostname##*\.}" = "p2p" ]; then
		config_load kadnode
		config_foreach find_section 'kadnode' "$hostname"
	fi
}

start()
{
exec >/tmp/freifunk_init.log 2>&1
. /lib/functions.sh


if [ -f /etc/init.d/freifunk_setup ]; then
	echo "(I) Freifunk: Skip and wait for /etc/init.d/freifunk_setup to be run."
	exit
fi

echo "(I) Freifunk: start freifunk_init"


mac=`uci get -q freifunk.@settings[0].mac`
share_internet=`uci get -q freifunk.@settings[0].share_internet`
config_nets=`uci get -q freifunk.@settings[0].config_nets`

echo "(I) Freifunk: mac: '$mac'"
echo "(I) Freifunk: share_internet: '$share_internet'"
echo "(I) Freifunk: config_nets: '$config_nets'"


#Create dummy interfaces to be able to set the mac of
#br-public and the mac for the OGMs of batman-adv freely.
#Also, a bridge needs at least one interface.

echo "(I) Freifunk: Create dummy_public interface."
tunctl -t dummy_public > /dev/null

echo "(I) Freifunk: Create dummy_private interface."
tunctl -t dummy_private > /dev/null

echo "(I) Freifunk: Create dummy_mesh interface."
tunctl -t dummy_mesh > /dev/null


#add first interface to set originator mac
ifconfig dummy_mesh hw ether $mac mtu 1426 up
batctl if add dummy_mesh


uci delete -q firewall.share_internet
if [ "$share_internet" = "yes" ]; then
	#forward from public to wan
	uci set firewall.share_internet="forwarding"
	uci set firewall.share_internet.src="public"
	uci set firewall.share_internet.dest="wan"
fi


find_default_target() {
	local s="$1" src="$2" n=""
	config_get n "$s" name
	[ "$src" == "$n" ] && { config_get default_target "$s" input; return 1; }
}

#filter ssh/https ports
config_load firewall
for src in wan private public; do
	default_target=""
	config_foreach find_default_target zone $src
	list_contains config_nets "$src" && target=ACCEPT || target=REJECT
	[ "$target" = "$default_target" ] && continue
	for port in 22 443; do
		s=firewall.`uci add firewall rule`
		uci set $s.src=$src
		uci set $s.dest_port=$port
		uci set $s.target=$target
		uci set $s.proto=tcp
	done
done

config_kadnode

echo "(I) Freifunk: done freifunk_init"
}
